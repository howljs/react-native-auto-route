"use strict";(self.webpackChunkauto_route=self.webpackChunkauto_route||[]).push([[887],{8872:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=a(5893),o=a(1151);const i={sidebar_position:1},r="Stack",s={id:"navigators/stack",title:"Stack",description:"The Stack Layout in react-native-auto-route is inherited from the Native Stack Navigator of React Navigation, so the props will be similar to the Native Stack Navigator.",source:"@site/docs/navigators/stack.md",sourceDirName:"navigators",slug:"/navigators/stack",permalink:"/docs/navigators/stack",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Error handling",permalink:"/docs/error-handling"},next:{title:"Tabs",permalink:"/docs/navigators/tab"}},c={},l=[{value:"Example Usage",id:"example-usage",level:2},{value:"Custom Stack Navigator:",id:"custom-stack-navigator",level:2},{value:"use <code>CustomStack</code> as Default Layout",id:"use-customstack-as-default-layout",level:3},{value:"use with <code>_layout.tsx</code>",id:"use-with-_layouttsx",level:3}];function u(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"stack",children:"Stack"}),"\n",(0,n.jsxs)(e.p,{children:["The ",(0,n.jsx)(e.code,{children:"Stack"})," Layout in ",(0,n.jsx)(e.code,{children:"react-native-auto-route"})," is inherited from the ",(0,n.jsx)(e.a,{href:"https://reactnavigation.org/docs/native-stack-navigator",children:"Native Stack Navigator"})," of React Navigation, so the props will be similar to the Native Stack Navigator."]}),"\n",(0,n.jsx)(e.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:"\ud83d\udcc2 app\n\u2503 \u2523 \ud83d\udcdc _layout.tsx\n\u2503 \u2523 \ud83d\udcdc sign-in.tsx\n\u2503 \u2523 \ud83d\udcdc home.tsx\n"})}),"\n",(0,n.jsx)(e.p,{children:"To create a Stack layout with two screens as shown in the file structure above:"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-tsx",metastring:'title="app/_layout.tsx"',children:"import { Stack } from 'react-native-auto-route';\n\nexport default function Layout() {\n  return (\n    <Stack />\n  );\n}\n"})}),"\n",(0,n.jsx)(e.p,{children:"Or"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-tsx",metastring:'title="app/_layout.tsx"',children:"import { Stack } from 'react-native-auto-route';\n\nexport default function Layout() {\n  return (\n    <Stack\n      initialRouteName=\"home\" // initialRouteName is directory name or filename\n      screenOptions={{\n        // https://reactnavigation.org/docs/native-stack-navigator#props\n        headerStyle: {\n          backgroundColor: '#f4511e',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      }}>\n      {/** The screen will be included automatically. Just need declare if you need to add custom configuration */}\n      <Stack.Screen\n        name=\"home\" // name prop is directory name or filename\n        options={{\n          // https://reactnavigation.org/docs/native-stack-navigator#options\n          title: \"Home\"\n        }} \n      />\n    </Stack>\n  );\n}\n"})}),"\n",(0,n.jsx)(e.h2,{id:"custom-stack-navigator",children:"Custom Stack Navigator:"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-tsx",metastring:'title="navigator/stack.tsx"',children:"import type {\n  ParamListBase,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport {\n  createStackNavigator,\n  type StackNavigationEventMap,\n  type StackNavigationOptions,\n} from '@react-navigation/stack';\nimport { createNavigator } from 'react-native-auto-route';\n\nconst StackNavigator = createStackNavigator().Navigator;\n\nexport const CustomStack = createNavigator<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  Omit<React.ComponentProps<typeof StackNavigator>, 'id' | 'children'> & {\n    children?: React.ReactNode;\n  }\n>(StackNavigator);\n\nexport default CustomStack;\n\n"})}),"\n",(0,n.jsxs)(e.h3,{id:"use-customstack-as-default-layout",children:["use ",(0,n.jsx)(e.code,{children:"CustomStack"})," as Default Layout"]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-tsx",metastring:'title="App.tsx"',children:"import * as React from 'react';\n\nimport RouterRoot from 'react-native-auto-route';\nimport CustomStack from './navigator/stack';\n\nexport default function App() {\n  return <RouterRoot DefaultLayout={CustomStack} />;\n}\n"})}),"\n",(0,n.jsxs)(e.h3,{id:"use-with-_layouttsx",children:["use with ",(0,n.jsx)(e.code,{children:"_layout.tsx"})]}),"\n",(0,n.jsx)(e.p,{children:"Example:"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-tsx",metastring:'title="app/home/_layout.tsx"',children:"import React from 'react';\nimport CustomStack from '../../src/navigator/stack';\n\nconst HomeLayout = () => {\n  return (\n    <CustomStack\n      initialRouteName=\"home\" // initialRouteName is directory name or filename\n      screenOptions={{\n        // https://reactnavigation.org/docs/stack-navigator#props\n        headerStyle: {\n          backgroundColor: '#f4511e',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      }}\n    >\n      {/** The screen will be included automatically. Just need declare if you need to add custom configuration */}\n      <CustomStack.Screen\n        name=\"home\" // name prop is directory name or filename\n        options={{\n          // https://reactnavigation.org/docs/stack-navigator#options\n          title: 'Home',\n        }}\n      />\n    </CustomStack>\n  );\n};\n\nexport default HomeLayout;\n"})})]})}function d(t={}){const{wrapper:e}={...(0,o.a)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(u,{...t})}):u(t)}},1151:(t,e,a)=>{a.d(e,{Z:()=>s,a:()=>r});var n=a(7294);const o={},i=n.createContext(o);function r(t){const e=n.useContext(i);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:r(t.components),n.createElement(i.Provider,{value:e},t.children)}}}]);