"use strict";(self.webpackChunkauto_route=self.webpackChunkauto_route||[]).push([[948],{8391:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(5893),r=n(1151);const o={sidebar_position:5},s="Passing parameters to routes",i={id:"params",title:"Passing parameters to routes",description:"Use useRouter hook",source:"@site/docs/params.md",sourceDirName:".",slug:"/params",permalink:"/react-native-auto-route/docs/params",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Layout routes",permalink:"/react-native-auto-route/docs/layout-routes"},next:{title:"Configuring the header bar",permalink:"/react-native-auto-route/docs/headers"}},c={},l=[{value:"Use <code>useRouter</code> hook",id:"use-userouter-hook",level:2},{value:"Initial params",id:"initial-params",level:2},{value:"Method 1: Export <code>initialParams</code> from the screen component.",id:"method-1-export-initialparams-from-the-screen-component",level:3},{value:"Method 2: <code>initialParams</code> property in the <code>Stack</code> component.",id:"method-2-initialparams-property-in-the-stack-component",level:3},{value:"Updating params",id:"updating-params",level:2},{value:"Passing params to a previous screen",id:"passing-params-to-a-previous-screen",level:2},{value:"What should be in params",id:"what-should-be-in-params",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"passing-parameters-to-routes",children:"Passing parameters to routes"}),"\n",(0,a.jsxs)(t.h2,{id:"use-userouter-hook",children:["Use ",(0,a.jsx)(t.code,{children:"useRouter"})," hook"]}),"\n",(0,a.jsxs)(t.p,{children:["To pass parameters to a route, we can use ",(0,a.jsx)(t.code,{children:"navigate"}),", ",(0,a.jsx)(t.code,{children:"push"})," or ",(0,a.jsx)(t.code,{children:"replace"})," methods from the ",(0,a.jsx)(t.code,{children:"useRouter"})," hook."]}),"\n",(0,a.jsxs)(t.p,{children:["Example: I want to pass the ",(0,a.jsx)(t.code,{children:"id"})," parameter to the ",(0,a.jsx)(t.code,{children:"detail"})," route."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:'title="app/home.tsx"',children:"import React from 'react';\nimport {Button, Text, View} from 'react-native';\nimport {useRouter} from 'react-native-auto-route';\n\nexport default function Home() {\n  const router = useRouter();\n  return (\n    <View>\n      <Text>Home</Text>\n      <Button\n        title=\"Go to detail\"\n        // highlight-next-line\n        onPress={() => router.navigate('detail/23')}\n      />\n      <Button\n        title=\"Go to detail\"\n        onPress={() =>\n          // highlight-next-line\n          router.navigate({ screen: 'detail/[id]', params: { id: 23 } })\n        }\n      />\n    </View>\n  );\n}\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:'title="app/detail/[id].tsx"',children:"import React from 'react';\nimport {Button, Text, View} from 'react-native';\nimport {useParams} from 'react-native-auto-route';\n\nexport default function Detail() {\n  const params = useParams();\n  return (\n    <View>\n      <Text>Detail: {params.id}</Text>\n    </View>\n  );\n}\n"})}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["Note: To make deep linking available to all screens in your project, the params will be transformed to string automatically. If you want to pass a number, you can use ",(0,a.jsx)(t.code,{children:"Number(params.id)"})," to convert it."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"initial-params",children:"Initial params"}),"\n",(0,a.jsx)(t.p,{children:"You can pass some initial params to a screen. If you didn't specify any params when navigating to this screen, the initial params will be used. They are also shallow merged with any params that you pass."}),"\n",(0,a.jsxs)(t.h3,{id:"method-1-export-initialparams-from-the-screen-component",children:["Method 1: Export ",(0,a.jsx)(t.code,{children:"initialParams"})," from the screen component."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:'title="app/detail/[id].tsx"',children:"import React from 'react';\nimport {Button, Text, View} from 'react-native';\nimport {useParams} from 'react-native-auto-route';\n\nexport default function Detail() {\n  const params = useParams();\n  return (\n    <View>\n      <Text>Detail: {params.id} - {params.otherId}</Text>\n    </View>\n  );\n}\n\n// highlight-start\nexport const initialParams = {\n  otherId: 23,\n};\n// highlight-end\n"})}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["Note: This method is not available when you set importMode to ",(0,a.jsx)(t.code,{children:"lazy"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(t.h3,{id:"method-2-initialparams-property-in-the-stack-component",children:["Method 2: ",(0,a.jsx)(t.code,{children:"initialParams"})," property in the ",(0,a.jsx)(t.code,{children:"Stack"})," component."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:'title="app/_layout.tsx"',children:"import React from 'react';\nimport { Stack } from 'react-native-auto-route';\n\nconst AppLayout = () => {\n  return (\n    <Stack initialRouteName=\"index\">\n      // highlight-next-line\n      <Stack.Screen name=\"detail/[id]\" initialParams={{ otherId: 23 }} />\n    </Stack>\n  );\n};\n\nexport default AppLayout;\n"})}),"\n",(0,a.jsx)(t.h2,{id:"updating-params",children:"Updating params"}),"\n",(0,a.jsxs)(t.p,{children:["You can update params of the current screen by using ",(0,a.jsx)(t.code,{children:"setParams"})," method from the ",(0,a.jsx)(t.code,{children:"useRouter"})," hook."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:'title="app/detail/[id].tsx"',children:"import React from 'react';\nimport {Button, Text, View} from 'react-native';\nimport {useParams, useRouter} from 'react-native-auto-route';\n\nexport default function Detail() {\n  const params = useParams();\n  const router = useRouter();\n  return (\n    <View>\n      <Text>Detail: {params.id}</Text>\n      <Button\n        title=\"Update params\"\n        // highlight-next-line\n        onPress={() => router.setParams({ id: 24 })}\n      />\n    </View>\n  );\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"passing-params-to-a-previous-screen",children:"Passing params to a previous screen"}),"\n",(0,a.jsxs)(t.p,{children:["To achieve this, you can use the ",(0,a.jsx)(t.code,{children:"navigate"})," method, which acts like goBack if the screen already exists. You can pass the params with ",(0,a.jsx)(t.code,{children:"navigate"})," to pass the data back:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:'title="app/home.tsx"',children:"import React from 'react';\nimport { Button, View } from 'react-native';\nimport { useParams, useRouter } from 'react-native-auto-route';\n\nexport default function Home() {\n  const router = useRouter();\n  const params = useParams();\n\n  React.useEffect(() => {\n    if (params?.post) {\n      // Post updated, do something with `params.post`\n      // For example, send the post to the server\n    }\n  }, [params?.post]);\n\n  return (\n    <View>\n      <Button\n        title=\"Create post\"\n        onPress={() => router.navigate('create-post')}\n      />\n    </View>\n  );\n}\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:'title="app/create-post.tsx"',children:"import React from 'react';\nimport {Button, TextInput, View} from 'react-native';\nimport {useParams, useRouter} from 'react-native-auto-route';\n\nexport default function Detail() {\n  const router = useRouter();\n  const [postText, setPostText] = React.useState('');\n\n  return (\n    <View>\n      <TextInput\n        multiline\n        placeholder=\"What's on your mind?\"\n        style={{ height: 200, padding: 10, backgroundColor: 'white' }}\n        value={postText}\n        onChangeText={setPostText}\n      />\n      <Button\n        title=\"Done\"\n        onPress={() => {\n          // Pass and merge params back to home screen\n          // highlight-next-line\n          router.navigate({ screen: 'home', params: { post: postText }, merge: true })\n        }}\n      />\n    </View>\n  );\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"what-should-be-in-params",children:"What should be in params"}),"\n",(0,a.jsx)(t.p,{children:"It's important to understand what kind of data should be in params. Params are like options for a screen. They should only contain information to configure what's displayed in the screen. Avoid passing the full data which will be displayed on the screen itself (e.g. pass a user id instead of user object). Also avoid passing data which is used by multiple screens, such data should be in a global store."}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["More detail: ",(0,a.jsx)(t.a,{href:"https://reactnavigation.org/docs/params/#what-should-be-in-params",children:"React Navigation docs"})]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>s});var a=n(7294);const r={},o=a.createContext(r);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);