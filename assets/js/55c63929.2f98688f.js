"use strict";(self.webpackChunkauto_route=self.webpackChunkauto_route||[]).push([[460],{8963:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var o=n(5893),r=n(1151);const s={sidebar_position:1},i="useRouter",a={id:"hooks/useRouter",title:"useRouter",description:"- router",source:"@site/docs/hooks/useRouter.md",sourceDirName:"hooks",slug:"/hooks/useRouter",permalink:"/react-native-auto-route/docs/hooks/useRouter",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Preventing going back",permalink:"/react-native-auto-route/docs/guides/preventing-going-back"},next:{title:"useParams",permalink:"/react-native-auto-route/docs/hooks/useParams"}},c={},u=[];function l(e){const t={h1:"h1",li:"li",ul:"ul",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"userouter",children:"useRouter"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["router","\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"router.navigate - Navigate to another screen. If the route name is exist, navigate to that."}),"\n",(0,o.jsx)(t.li,{children:"router.push - Push a screen on top of the stack, can push a screen multiple times"}),"\n",(0,o.jsx)(t.li,{children:"router.replace - Replace the current screen with a new one"}),"\n",(0,o.jsx)(t.li,{children:"router.canGoBack - Check if we can go back"}),"\n",(0,o.jsx)(t.li,{children:"router.isFocused - Check if the current screen is focused"}),"\n",(0,o.jsx)(t.li,{children:"router.setParams - Update the params of the current screen"}),"\n",(0,o.jsx)(t.li,{children:"router.setOptions - Update the options of the current screen"}),"\n",(0,o.jsx)(t.li,{children:"router.pop - The pop action takes you back to a previous screen in the stack. It takes one optional argument (count), which allows you to specify how many screens to pop back by."}),"\n",(0,o.jsx)(t.li,{children:"router.popToTop - Pop to the first screen in the stack, dismissing all other screens."}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>i});var o=n(7294);const r={},s=o.createContext(r);function i(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);